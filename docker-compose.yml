version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: atropos
      POSTGRES_PASSWORD: atropos_dev
      POSTGRES_DB: atropos_tasks
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U atropos -d atropos_tasks"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  api:
    build: .
    working_dir: /app
    ports:
      - "8000:8000"
    environment:
      - DEBUG=${DEBUG:-false}
      - DATABASE_URL=${DATABASE_URL:-postgresql://atropos:atropos_dev@postgres:5432/atropos_tasks}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      - PYTHONPATH=/app
    volumes:
      - ./app:/app/app  # For development - mount source code
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3

  worker:
    build: .
    working_dir: /app
    command: python -m celery -A app.worker worker --loglevel=info --concurrency=2
    environment:
      - DEBUG=${DEBUG:-false}
      - DATABASE_URL=${DATABASE_URL:-postgresql://atropos:atropos_dev@postgres:5432/atropos_tasks}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND:-redis://redis:6379/0}
      - PYTHONPATH=/app
    volumes:
      - ./app:/app/app  # For development - mount source code
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-m", "celery", "-A", "app.worker", "inspect", "ping"]
      interval: 60s
      timeout: 10s
      retries: 3

  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    volumes:
      - ./frontend/src:/app/src  # Mount source code for development
      - ./frontend/public:/app/public  # Mount public assets
      - /app/node_modules  # Prevent overwriting node_modules
      - /app/.next  # Prevent overwriting .next build cache
    depends_on:
      - api
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: 